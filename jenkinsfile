pipeline {
    agent any

    environment {
        REPO = 'MukherjeePushpendu/Devops-Challenge'
        IMAGE_FRONT = 'fusionpactdevopschallenge-frontend'
        IMAGE_BACK = 'fusionpactdevopschallenge-backend'
        TAG = "${BUILD_NUMBER}"           // Unique tag per build
        EC2_IP = '43.204.144.250'
        PEM_FILE = '/var/lib/jenkins/.ssh/heliii.pem'
        REMOTE_DIR = '/home/ubuntu/fusionpact'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "https://github.com/${REPO}.git"
            }
        }

        stage('Build Docker Images') {
            steps {
                sh 'docker compose build'
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh """
                        echo "$PASS" | docker login -u "$USER" --password-stdin
                        docker tag ${IMAGE_FRONT}:latest $USER/${IMAGE_FRONT}:${TAG}
                        docker tag ${IMAGE_BACK}:latest $USER/${IMAGE_BACK}:${TAG}
                        docker push $USER/${IMAGE_FRONT}:${TAG}
                        docker push $USER/${IMAGE_BACK}:${TAG}
                    """
                }
            }
        }

        stage('Deploy with Docker Compose on EC2') {
            steps {
                sh """
                    ssh -i ${PEM_FILE} -o StrictHostKeyChecking=no ubuntu@${EC2_IP} '
                        # Create folder if it does not exist
                        mkdir -p ${REMOTE_DIR} &&
                        cd ${REMOTE_DIR} &&
                        
                        # Copy docker-compose.yml and prometheus.yml
                        cat > docker-compose.yml <<EOF
version: "3.9"

services:
  backend:
    image: pushpendumukherjee/${IMAGE_BACK}:${TAG}
    container_name: backend
    ports:
      - "5000:5000"
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    image: pushpendumukherjee/${IMAGE_FRONT}:${TAG}
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "472:472"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  grafana-storage: {}
EOF

                        cat > prometheus.yml <<EOF
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'backend'
    static_configs:
      - targets: ['backend:5000']
EOF

                        # Stop and remove old containers
                        docker-compose down || true

                        # Start all services
                        docker-compose up -d
                    '
                """
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful! All containers are running with tag: ${TAG}"
        }
        failure {
            echo '❌ Deployment failed. Check logs.'
        }
    }
}
