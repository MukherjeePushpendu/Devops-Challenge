pipeline {
    agent any

    environment {
        REPO = 'MukherjeePushpendu/Devops-Challenge'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        IMAGE_FRONT = 'fusionpactdevopschallenge-frontend'
        IMAGE_BACK = 'fusionpactdevopschallenge-backend'
        TAG = "${BUILD_NUMBER}"
        EC2_IP = '13.201.83.30'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "https://github.com/${REPO}.git"
            }
        }

        stage('Build Docker Images') {
            steps {
                sh 'docker compose build'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh """
                        echo "$PASS" | docker login -u "$USER" --password-stdin
                        docker tag ${IMAGE_FRONT}:latest $USER/${IMAGE_FRONT}:${TAG}
                        docker tag ${IMAGE_BACK}:latest $USER/${IMAGE_BACK}:${TAG}
                        docker push $USER/${IMAGE_FRONT}:${TAG}
                        docker push $USER/${IMAGE_BACK}:${TAG}
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sh """
                ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${EC2_IP} '
                    echo "‚úÖ Connected to EC2. Starting full deployment..."

                    # Ensure latest repo exists
                    if [ ! -d "/home/ubuntu/devops-challenge" ]; then
                        git clone https://github.com/MukherjeePushpendu/Devops-Challenge.git /home/ubuntu/devops-challenge
                    else
                        cd /home/ubuntu/devops-challenge && git pull
                    fi

                    # Stop and remove old containers
                    docker stop backend frontend prometheus grafana || true
                    docker rm backend frontend prometheus grafana || true

                    # Pull latest images
                    docker pull pushpendumukherjee/fusionpactdevopschallenge-backend:${TAG}
                    docker pull pushpendumukherjee/fusionpactdevopschallenge-frontend:${TAG}

                    # Run backend
                    docker run -d --name backend -p 5000:5000 pushpendumukherjee/fusionpactdevopschallenge-backend:${TAG}

                    # Run frontend
                    docker run -d --name frontend -p 80:80 pushpendumukherjee/fusionpactdevopschallenge-frontend:${TAG}

                    # Run Prometheus
                    docker run -d --name prometheus -p 9090:9090 \
                        -v /home/ubuntu/devops-challenge/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml \
                        prom/prometheus

                    # Run Grafana
                    docker run -d --name grafana -p 3000:3000 \
                        -v /home/ubuntu/devops-challenge/monitoring/grafana/provisioning:/etc/grafana/provisioning \
                        -v /home/ubuntu/devops-challenge/monitoring/grafana/dashboards:/var/lib/grafana/dashboards \
                        grafana/grafana

                    echo "‚úÖ All containers deployed successfully!"
                '
                """
            }
        }
    }

    post {
        success {
            echo """
‚úÖ Deployment Successful!

üåê Frontend:  http://${EC2_IP}
üß† Backend:   http://${EC2_IP}:5000
üìà Prometheus: http://${EC2_IP}:9090
üìä Grafana:   http://${EC2_IP}:3000 (admin / admin)
"""
        }
        failure {
            echo '‚ùå Deployment failed. Please check Jenkins logs.'
        }
    }
}
