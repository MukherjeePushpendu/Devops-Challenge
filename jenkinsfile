pipeline {
    agent any

    environment {
        REPO = 'MukherjeePushpendu/Devops-Challenge'
        IMAGE_FRONT = 'fusionpactdevopschallenge-frontend'
        IMAGE_BACK = 'fusionpactdevopschallenge-backend'
        TAG = "${BUILD_NUMBER}"   // Unique tag per build
        EC2_IP = '43.204.144.250'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "https://github.com/${REPO}.git"
            }
        }

        stage('Build Docker Images') {
            steps {
                sh 'docker compose build'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh """
                        echo "$PASS" | docker login -u "$USER" --password-stdin
                        docker tag ${IMAGE_FRONT}:latest $USER/${IMAGE_FRONT}:${TAG}
                        docker tag ${IMAGE_BACK}:latest $USER/${IMAGE_BACK}:${TAG}
                        docker push $USER/${IMAGE_FRONT}:${TAG}
                        docker push $USER/${IMAGE_BACK}:${TAG}
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sh """
                     ssh -i /var/lib/jenkins/.ssh/heliii.pem -o StrictHostKeyChecking=no ubuntu@${EC2_IP} '
                        set -e

                        # Stop & remove old containers
                        docker stop backend frontend prometheus grafana || true
                        docker rm backend frontend prometheus grafana || true

                        # Pull latest images
                        docker pull pushpendumukherjee/${IMAGE_BACK}:${TAG}
                        docker pull pushpendumukherjee/${IMAGE_FRONT}:${TAG}
                        docker pull prom/prometheus:latest
                        docker pull grafana/grafana:latest

                        # Run backend
                        docker run -d --name backend -p 8000:8000 pushpendumukherjee/${IMAGE_BACK}:${TAG}

                        # Run frontend
                        docker run -d --name frontend -p 80:80 --link backend:backend pushpendumukherjee/${IMAGE_FRONT}:${TAG}

                        # Run Prometheus
                        docker run -d --name prometheus -p 9090:9090 \
                            -v ~/fusionpact/prometheus.yml:/etc/prometheus/prometheus.yml \
                            prom/prometheus:latest

                        # Run Grafana
                        docker run -d --name grafana -p 3000:3000 \
                            -e GF_SECURITY_ADMIN_USER=admin \
                            -e GF_SECURITY_ADMIN_PASSWORD=admin \
                            -v grafana-storage:/var/lib/grafana \
                            --link prometheus:prometheus \
                            grafana/grafana:latest
                    '
                """
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful! Services running on EC2 IP: ${EC2_IP}"
        }
        failure {
            echo '❌ Build or deployment failed. Check logs.'
        }
    }
}
